// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> BUFFER A TAB (scene)

//------------------------------------------------------------
// RENDERING FUNCTIONS

vec3 rotation(in float time, in sViewport vp)
{
    vec2 newUv = vp.uv;
 	float roat = time;
    float y = newUv.y;
    float x = newUv.x;
    newUv.x = -sin(roat)*(x) + sin(roat)*(y);
    newUv.y = -sin(roat)*(x) + sin(roat)*(y);
    vec3 roatVec = vec3(abs(sin(roat)), (cos(1.2*newUv) - 0.1));
    return roatVec;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in float time)
{
    vec3 theRotation = ray.direction.xyz + rotation(time, vp);
    return texture(iChannel0, theRotation);
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime);
}
