// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN

// asPoint: promote a 3D vector into a 4D vector representing a point (w=1)
//    point: input 3D vector
vec4 asPoint(in vec3 point)
{
    return vec4(point, 1.0);
}

// asOffset: promote a 3D vector into a 4D vector representing an offset (w=0)
//    point: input 3D vector
vec4 asOffset(in vec3 offset)
{
    return vec4(offset, 0.0);
}

// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec3 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in float focalLength,
                  in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2), z = -f
    viewport = vec3(ndc * vec2(aspect, 1.0) * (viewportHeight * 0.5), -focalLength);
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec3 eyePosition, in vec3 viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = asOffset(viewport - eyePosition);
}

struct sSphere
{
  vec4 center;
  float radius;
};

void initSphere(out sSphere sphere, in vec3 center, in float radius)
{
    sphere.center = asPoint(center);
    sphere.radius = radius;

} 

// utlility functions
float lenSQ (vec2 x)
{
 	return dot(x, x);   
}

float pow2f(float x)
{
 	return (x * x);   
}

vec3 pow2vec3(vec3 x)
{
 	return (x * x);   
}

vec3 powerVec(vec3 number, vec3 exponent)
{
 	return pow(number, exponent);
}

float powerf(float number, float exponent)
{
 	return pow(number, exponent);
}

//

struct pointLight
{
    vec4 center;
    vec3 color; 
    float intensity;  
};

void initLight(out pointLight light, in vec3 center, in float intensity, in vec3 color)
{
    light.center = asPoint(center);
    light.color = color;
    light.intensity = intensity;
}

void lightMaker()
{
    
}

vec4 calcLight(in vec4 rayOrigin, in sSphere sphere, in vec3 sPos, in vec3 sNorm, in pointLight light)
{

    	// Test
        //colors
   		vec3 yellow = vec3(1.0, 1.0, 0.0);
   	    vec3 blue = vec3(0.0, 0.0, 1.0);
    	vec3 red = vec3(1.0, 0.0, 0.0);
    	
    
        vec3 lightPos = normalize(light.center.xyz - sPos);
        float difCoefficient = max(0.0, dot(sNorm, lightPos));
        
        vec3 lightDis = vec3(light.center.xyz - sphere.radius); 
        vec3 attenuation = 1.0 / (1.0 + (lightDis / light.intensity) +  pow2vec3(lightDis) / pow2f(light.intensity));
        vec3 difIntensity = vec3(difCoefficient * attenuation);
    
        // Returning
        vec3 lam_color = vec3(difIntensity * sNorm * light.color);
        
        vec3 viewVec = normalize(rayOrigin.xyz - sPos);
        vec3 refLightVec = reflect(-(lightPos), sNorm);
        
        float specCoefficient = max(0.0, dot(viewVec, refLightVec));
        const float two = 2.0;
        float highExpo = powerf( two, 3.0);
        float specIntensity = powerf(specCoefficient, highExpo);
        const float ambIntensity = 0.1;
        
        
        vec3 phong_color = vec3((ambIntensity * blue) + ((difIntensity * red) + (specIntensity * yellow)) * light.color);
        
        vec3 half_vector = normalize(lightPos + viewVec);
        float blinnCoefficient = dot(sNorm, half_vector);
        float blinnHighExpo = (4.0 * highExpo);
        float blinnSpecIntesnity = powerf(blinnCoefficient, blinnHighExpo);
        vec3 blinn_phong_color =  vec3((ambIntensity * blue) + ((difIntensity * red) + (blinnSpecIntesnity * yellow)) * light.color);
    
        //Testing colors
        vec4 showColor = vec4(blinn_phong_color, ambIntensity);
        return showColor;
}
    
// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin)
{
    const float radius = 0.5;
    
    // Sphere SCENE
    sSphere sphere;
    initSphere(sphere, vec3(0.0, 0.0, -4.0), radius);
    
    // Light1 SCENE
    pointLight light1;
    light1.intensity = 0.5;
    initLight(light1, vec3(100.0, 100.0, 1.0), light1.intensity, vec3(1.0, 0.0, 0.0)); // red
    
    // Light2 SCENE
    pointLight light2;
    light2.intensity = 0.5;
    initLight(light2, vec3(14.0, 0.0, 2.0), light2.intensity, vec3(1.0, 1.0, 0.0)); // yellow
    
    // Light3 SCENE
    pointLight light3;
    light3.intensity = 0.5;
    initLight(light3, vec3(7.0, -12.0, 40.0), light3.intensity, vec3(0.0, 1.0, 1.0)); // cyan
    
    
    
    
    //TEST
    vec3 dp;
    dp.xy = rayDirection.xy - sphere.center.xy;
    float lSq = lenSQ(dp.xy);
    float rSq = sphere.radius * sphere.radius;
        
    if (lSq <= rSq)
    {
        dp.z = rSq - lSq;
        
        vec3 position = sphere.center.xyz + vec3(dp.x, dp.y, sqrt(dp.z)); // zSq -> 
        vec3 normal = vec3 (position - sphere.center.xyz) / sphere.radius; // normalizing it  
        vec4 sphere_color = vec4(normal * 0.5 + 0.5, 1.0);
        
        vec4 light1_color = calcLight(rayOrigin, sphere, position, normal, light1);
        vec4 light2_color = calcLight(rayOrigin, sphere, position, normal, light2);
        vec4 light3_color = calcLight(rayOrigin, sphere, position, normal, light3);
        
        sphere_color += light1_color;
        sphere_color += light2_color;
        sphere_color += light3_color;
        
        return sphere_color;
        
    }
    
    
	// BACKGROUND
	const vec3 warm = vec3(0.8, 0.4, 0.2), cool = vec3(0.2, 0.4, 0.8);
	return vec4(mix(warm, cool, rayDirection.y), 1.0);
    //return vec4(0.5); // gray background
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec3 viewport;
    vec2 ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    fragColor = vec4(0.0);
    
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
    	             viewportHeight, focalLength,
    	             fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin, vec3(0.0), viewport);
    
    fragColor += calcColor(rayDirection, rayOrigin);
}