// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Modification Title: Intro to Textures & Image Processing
// Modification Author: Shakeem Brown

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// Shakeem's Utility functions

// absolute_value: an optimized version of the abs function
//		number: the number the user inputs
float absolute_value(in float number)
{
    if (number > 0.0) // positive case of abs
    {
        return number; // returns a positive number
    }
    else if (number < 0.0) // the negative case of abs
    {
        float postive_reseter = -1.0; // this number is used to make the result positive
        return number * postive_reseter; // returns a positive number
    }
    else // when number == 0.
    {
        return number; // returns zero
    }
}

// lengthOfVector
//		vector3
float lengthOfVector(in vec3 vector3)
{
    float theSQUR = 0.5; // the float used to get the square root
    // the formula for the magintude of a vector 3
    float theLength = ((vector3.x * vector3.x) + (vector3.y * vector3.y) + (vector3.z * vector3.z)) * theSQUR;
 	return theLength; // returns the maginutue
}

// dotProduct: an optimized version of dot function
//		vector1: the first vector
//		vector2: the second vector
float dotProduct(in vec2 vector1, in vec2 vector2)
{
    float theDotProduct = (vector1.x * vector2.x) + (vector1.y * vector2.y);
    return theDotProduct;
}

// crossFadeAider: creates the change in image according to time
//		image1: the first image/ texture
//		image2: the second image/ texture
//		time: the time 
vec4 crossFadeAider(in vec4 image1, in vec4 image2, in float time)
{
    float time_scalar = 0.005; // the scalar of the time
    // returns the line that will be moving to aid in transistion of the crossfade
    return image1 * (1.0 - time_scalar * time) + image2 * time_scalar * time;
}

/*
	Inspired by @ stomp
        			https://www.shadertoy.com/view/Xt2Szz
*/

// crossFadeEffect: implements the transition from one image to the other
//		x_textureCoord: is the uv's x position
//		theXPosition: x position of the transition according to  time
//		texture1: the first texture/ image
//		texture2: the second texture/ image
vec4 crossFadeEffect(in float x_textureCoord, in float theXPosition, in vec4 texture1, in vec4 texture2)
{
    vec4 tempVec = vec4(0.0, 0.0, 0.0, 1.0); // temporay vec4 to allow for texture change
    float width = 0.001; // the width of the transition line
    
    if (x_textureCoord > (theXPosition - width) && x_textureCoord < (theXPosition + width))
    {
        if(x_textureCoord < theXPosition) // shows the first image according to the x position
        {
        	return crossFadeAider(tempVec, texture1, absolute_value(theXPosition - x_textureCoord) /width);
    
        }
        else // shows the second image according to the x position
        {
			return crossFadeAider(tempVec, texture2, absolute_value(theXPosition - x_textureCoord) /width);
        }
    }
    else // if the transition fails
    {
        if(x_textureCoord < theXPosition)
        {
            return texture1; // shows image1
        }
        else
        {
            return texture2; // shows image2
        }
    }
}

/*
	Inspiration by @ creikey
					https://www.shadertoy.com/view/3lGXzG
*/

// distortionEffect: creates the distorted behavior according to the uv's xand y possion
//		x_textureCoord: is the uv's x position
//		y_textureCoord: is the uv's y position
//		time: the time
//		location: is the pixel coordinate but scalled to the resolution.
vec4 distortionEffect(in float x_textureCoord, in float y_textureCoord, in float time, in vec2 location)
{
    x_textureCoord += sin(time); // setting the x coord of the texture coord according to time
    y_textureCoord += cos(time); // setting the y coord of the texture coord according to time
    
    float wave_speed = 1.5; // the wave speed of distortion
    float numberOf_waves = 0.75; // number of waves
    float oppisite_waves_speed = 2.0; // oppsitve wave ossilation
    float y_wave = 5.0; // y direction waves
    float x_wave = 10.0; // x direction waves
    
    // reassigning the x coord to a wave like pattern
    x_textureCoord += cos(x_textureCoord * x_wave + time) * numberOf_waves; 
    // reassigning the y coord to a wave like pattern
    y_textureCoord += sin(y_textureCoord * y_wave + x_textureCoord * oppisite_waves_speed + time * wave_speed) * numberOf_waves;
    
    //Combining the x and y coordinates of the texture coord to a vec2
    vec2 newUV = vec2(x_textureCoord, y_textureCoord);
    newUV *= location; // setting the uv to the frame location of the screen
    
    vec4 distortedImage = vec4 (texture(iChannel1, newUV)); // adds the texture with the new uv
    return distortedImage; // returns the distorted image
}

/*
	Function Entirely by @ Impossible 
				https://www.shadertoy.com/view/4tfGWl
	Modification by: Shakeem Brown
	Modification Reason: outsourced the dotproduct function into my own
				         dot product function
*/
vec3 dither(in vec2 vScreenPos, in float time)
{
    vec2 vector2 = vec2(171.0, 231.0);
    vec2 theTime = vec2(time);
    vec2 screenPos_time = vScreenPos.xy + theTime;
	vec3 vDither = vec3(dotProduct(vector2, screenPos_time));
	vDither.rgb = fract(vDither.rgb / vec3(103.0, 71.0, 97.0)) - vec3(0.5, 0.5, 0.5);
	return ( vDither.rgb / 255.0 ) * 0.375;
}

/*
	Inspired by: @ Hexus
					https://www.shadertoy.com/view/MsyXz3
*/

vec4 shadingEffect(in vec2 location, in float time, in vec2 xy_textureCoord, in vec2 resolution, in vec4 image)
{
    vec2 px = xy_textureCoord * resolution; // the pixel coordinant
    vec3 gray = vec3(0.5); // the color gray
    float alpha = 1.0; // the alpha
    vec4 light_color = vec4(gray, alpha); // Gray Scaled light
    vec4 light_ambient_color = vec4(0.0); // black light
    vec3 the_light = vec3(0.1, 2.0, 5.0); // the light vector
    float intensity = 15.0; // the intensity of the light
    
    float light_radius = 128.0; // the radius of the light
    float flickering_speed = 1.5; // the flickering speed of the light
    float flickering_offset = 50.0; // the flickering speed offset
    light_radius += sin(time * flickering_speed) * flickering_offset; // the flickering effect
    
    // the delta of the light image in relation to the uv and the screen (& texture later on)
    vec3 delta = vec3(location - xy_textureCoord, location.x);
    delta.x /= light_radius / resolution.x; // makes the light's delta.x fixed to the radius
    delta.y /= light_radius / resolution.y; // makes the light's delta.y fixed to the radius
	
    // The distance from the light to the image
    float fragDistoLight = lengthOfVector(delta);
    
    // The normalzied light color
    vec3 normal_light_color = light_color.rbg * light_color.a;
    
    // the normalized light ambiance color
    vec3 normal_light_ambient_color = light_ambient_color.rgb * light_ambient_color.a;
    
    // Calculates the attenuation of the light
    float attenuation = intensity / (the_light.x + (the_light.y * fragDistoLight) +
                                     (the_light.z * fragDistoLight * fragDistoLight));
	
    // the new light after combining the privous calculations
    vec3 new_light = normal_light_ambient_color + normal_light_color * attenuation;
    new_light = pow(new_light, gray); // the new light raised to the color gray
    new_light += dither(px.xy, time); // using impossible's function to add to the new light
    
    // The final shading lampert shading
    vec4 shadingEffectVector = vec4(vec3(image.r) * new_light, image.a);
    
    return shadingEffectVector; // returning the lampert shading effect with flickering

}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in float time)
{
    sCoord px = vp.pixelCoord; // the pixel coordinate
    sDCoord res = iChannelResolution[0].xy; // the resolution
    sScalar ratio = res.y * vp.resolutionInv.y; // the scalar ratio according to the resoltion
    sCoord location = px / res; // the location of the screen according to the pixel coord and the res
    location = ratio * location; // multiplying by the ratio
    
    //Testing for lighting
    vec4 innerVortexImage = vec4(normalize(vec3(vp.viewportPoint.xy, 0.0)), 1.0);
    
    // Declaration of the dirt image
    vec4 dirtImage = vec4(texture(iChannel0, location).rgbr);
    
    // Declaration of the stone image
    vec4 stoneImage = vec4(texture(iChannel1, location).rgbr);
    
    // texture coordinate / screen space coordinante
    vec2 uv = px.xy / res.xy;
    float xPos = absolute_value(sin(time)); // x position according to the time
    vec2 screenRez = res; // the screen resolution
    vec3 cubeLoc = ray.direction.xyz; // the cube location
    
    // Declaration of the ballRoom image
    vec4 ballRoom = vec4(texture(iChannel2, cubeLoc));
    
    // cCoss Fade Effect
    //return crossFadeEffect(uv.x, xPos, dirtImage, stoneImage);
    
    // Distortion Effect
    //return distortionEffect(uv.x, uv.y, time, location);
    // Comparision for Distortion Effect
    //return stoneImage;
    
    // Lampert Shading Effect
    //return shadingEffect(location, time, uv.xy, screenRez, stoneImage);
    
    // the 3dmap cupe implementation
    return ballRoom;
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime);
}
