// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
// Title: Intro to Textures & Image Processing
// Author: Shakeem Brown

//------------------------------------------------------------
// TYPE ALIASES & UTILITY FUNCTIONS

// sScalar: alias for a 1D scalar (non-vector)
#define sScalar float

// sCoord: alias for a 2D coordinate
#define sCoord vec2

// sDCoord: alias for a 2D displacement or measurement
#define sDCoord vec2

// sBasis: alias for a 3D basis vector
#define sBasis vec3

// sPoint: alias for a point/coordinate/location in space
#define sPoint vec4

// sVector: alias for a vector/displacement/change in space
#define sVector vec4


// color3: alias for a 3D vector representing RGB color
// 	(this is non-spatial so neither a point nor vector)
#define color3 vec3

// color4: alias for RGBA color, which is non-spatial
// 	(this is non-spatial so neither a point nor vector)
#define color4 vec4


// asPoint: promote a 3D vector into a 4D vector 
//	representing a point in space (w=1)
//    v: input 3D vector to be converted
sPoint asPoint(in sBasis v)
{
    return sPoint(v, 1.0);
}

// asVector: promote a 3D vector into a 4D vector 
//	representing a vector through space (w=0)
//    v: input 3D vector to be converted
sVector asVector(in sBasis v)
{
    return sVector(v, 0.0);
}


// lengthSq: calculate the squared length of a vector type
sScalar lengthSq(sDCoord x)
{
    return dot(x, x);
}
sScalar lengthSq(sBasis x)
{
    return dot(x, x);
}
sScalar lengthSq(sVector x)
{
    return dot(x, x);
}


//------------------------------------------------------------
// VIEWPORT INFO

// sViewport: info about viewport
//    viewportPoint: location on the viewing plane 
//							x = horizontal position
//							y = vertical position
//							z = plane depth (negative focal length)
//	  pixelCoord:    position of pixel in image
//							x = [0, width)	-> [left, right)
//							y = [0, height)	-> [bottom, top)
//	  resolution:    resolution of viewport
//							x = image width in pixels
//							y = image height in pixels
//    resolutionInv: resolution reciprocal
//							x = reciprocal of image width
//							y = reciprocal of image height
//	  size:       	 in-scene dimensions of viewport
//							x = viewport width in scene units
//							y = viewport height in scene units
//	  ndc: 			 normalized device coordinate
//							x = [-1, +1) -> [left, right)
//							y = [-1, +1) -> [bottom, top)
// 	  uv: 			 screen-space (UV) coordinate
//							x = [0, 1) -> [left, right)
//							y = [0, 1) -> [bottom, top)
//	  aspectRatio:   aspect ratio of viewport
//	  focalLength:   distance to viewing plane
struct sViewport
{
    sPoint viewportPoint;
	sCoord pixelCoord;
	sDCoord resolution;
	sDCoord resolutionInv;
	sDCoord size;
	sCoord ndc;
	sCoord uv;
	sScalar aspectRatio;
	sScalar focalLength;
};

// initViewport: calculate the viewing plane (viewport) coordinate
//    vp: 		      output viewport info structure
//    viewportHeight: input height of viewing plane
//    focalLength:    input distance between viewer and viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void initViewport(out sViewport vp,
                  in sScalar viewportHeight, in sScalar focalLength,
                  in sCoord fragCoord, in sDCoord resolution)
{
    vp.pixelCoord = fragCoord;
    vp.resolution = resolution;
    vp.resolutionInv = 1.0 / vp.resolution;
    vp.aspectRatio = vp.resolution.x * vp.resolutionInv.y;
    vp.focalLength = focalLength;
    vp.uv = vp.pixelCoord * vp.resolutionInv;
    vp.ndc = vp.uv * 2.0 - 1.0;
    vp.size = sDCoord(vp.aspectRatio, 1.0) * viewportHeight;
    vp.viewportPoint = asPoint(sBasis(vp.ndc * vp.size * 0.5, -vp.focalLength));
}


//------------------------------------------------------------
// RAY INFO

// sRay: ray data structure
//	  origin: origin point in scene
//    direction: direction vector in scene
struct sRay
{
    sPoint origin;
    sVector direction;
};

// initRayPersp: initialize perspective ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayPersp(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    ray.origin = asPoint(eyePosition);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    ray.direction = asVector(viewport - eyePosition);
}

// initRayOrtho: initialize orthographic ray
//    ray: 		   output ray
//    eyePosition: position of viewer in scene
//    viewport:    input viewing plane offset
void initRayOrtho(out sRay ray,
             	  in sBasis eyePosition, in sBasis viewport)
{
    // offset eye position to point on plane at the same depth
    initRayPersp(ray, eyePosition + sBasis(viewport.xy, 0.0), viewport);
}


//------------------------------------------------------------
// RENDERING FUNCTIONS

// Shakeem's Utility functions

// absolute_value: an optimized version of the abs function
//		number: the number the user inputs
float absolute_value(in float number)
{
    if (number > 0.0) // positive case of abs
    {
        return number; // returns a positive number
    }
    else if (number < 0.0) // the negative case of abs
    {
        float postive_reseter = -1.0; // this number is used to make the result positive
        return number * postive_reseter; // returns a positive number
    }
    else // when number == 0.
    {
        return number; // returns zero
    }
}

// crossFadeAider: creates the change in image according to time
//		image1: the first image/ texture
//		image2: the second image/ texture
//		time: the time 
vec4 crossFadeAider(in vec4 image1, in vec4 image2, in float time)
{
    float time_scalar = 0.005; // the scalar of the time
    // returns the line that will be moving to aid in transistion of the crossfade
    return image1 * (1.0 - time_scalar * time) + image2 * time_scalar * time;
}

// crossFadeEffect: implements the transition from one image to the other
//		x_textureCoord: is the uv's x position
//		theXPosition: x position of the transition according to  time
//		texture1: the first texture/ image
//		texture2: the second texture/ image
vec4 crossFadeEffect(in float x_textureCoord, in float theXPosition, in vec4 texture1, in vec4 texture2)
{
    vec4 tempVec = vec4(0.0, 0.0, 0.0, 1.0); // temporay vec4 to allow for texture change
    float width = 0.001; // the width of the transition line
    
    if (x_textureCoord > (theXPosition - width) && x_textureCoord < (theXPosition + width))
    {
        if(x_textureCoord < theXPosition) // shows the first image according to the x position
        {
        	return crossFadeAider(tempVec, texture1, absolute_value(theXPosition - x_textureCoord) /width);
    
        }
        else // shows the second image according to the x position
        {
			return crossFadeAider(tempVec, texture2, absolute_value(theXPosition - x_textureCoord) /width);
        }
    }
    else // if the transition fails
    {
        if(x_textureCoord < theXPosition)
        {
            return texture1; // shows image1
        }
        else
        {
            return texture2; // shows image2
        }
    }
}

vec4 distortionEffect(in float x_textureCoord, in float y_textureCoord, in float time)
{
    x_textureCoord += sin(time);
    y_textureCoord += cos(time);
    x_textureCoord += cos(x_textureCoord * 10.0 + time) * 0.3;
    y_textureCoord += sin(y_textureCoord * 5.0 + x_textureCoord * 4.0 + time * 1.3) * 0.4;
    
    vec2 newUV = vec2(x_textureCoord, y_textureCoord);
    vec4 distortedImage = vec4 (texture(iChannel1, newUV));
    return distortedImage;
}

// calcColor: calculate the color of current pixel
//	  vp:  input viewport info
//	  ray: input ray info
color4 calcColor(in sViewport vp, in sRay ray, in float time)
{
    sCoord px = vp.pixelCoord; // the pixel coordinate
    sDCoord res = iChannelResolution[0].xy; // the resolution
    sScalar ratio = res.y * vp.resolutionInv.y;
    sCoord location = px / res;
    location = ratio * location;
    
    //Testing for lighting
    vec4 innerVortexImage = vec4(normalize(vec3(vp.viewportPoint.xy, 0.0)), 1.0);
    
    // Declaration of the dirt image
    vec4 dirtImage = vec4(texture(iChannel0, location).rgbr);
    
    // Declaration of the stone image
    vec4 stoneImage = vec4(texture(iChannel1, location).rgbr);
    
    // texture coordinate / screen space coordinante
    vec2 uv = px.xy / res.xy;
    float xPos = absolute_value(sin(time)); // x position according to the time
    
    // crossFadeEffect
    //return crossFadeEffect(uv.x, xPos, dirtImage, stoneImage);
    
    // distortionEffect
    return distortionEffect(uv.x, uv.y, time);
    
    
}


//------------------------------------------------------------
// SHADERTOY MAIN

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // viewport info
    sViewport vp;

    // ray
    sRay ray;
    
    // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    fragColor += calcColor(vp, ray, iTime);
}
