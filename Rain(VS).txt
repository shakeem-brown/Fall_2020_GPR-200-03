#version 330 core

/*
	Title: Final Project Rain with Light[n]ing
	Instructor Name: Daniel Buckstein
	Authors: Andrew Barnett & Shakeem Brown
*/

layout (location = 0) in vec3 aPos;
layout (location = 1) in vec3 aNormal;

out VS_OUT 
{
    vec3 normal;
    vec4 camera;
} vs_out;

// TRANSFORM UNIFORMS
uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

// CAMERA UNIFORM 
uniform vec4 cameraPos;
uniform vec3 billboardSize;
uniform vec3 billboardCenterPos;

void main()
{
	// Defining the geometry of sphere and outing the line (normal) properties
    mat3 normalMatrix = mat3(transpose(inverse(view * model)));
    vs_out.normal = vec3(projection * vec4(normalMatrix * aNormal, 0.0));
    gl_Position = projection * view * model * vec4(aPos, 1.0); 
    
    // Putting the camera into world-space.
    mat4 inverseView = inverse(view);
    vec4 cameraRight_worldSpace = inverseView * cameraPos;
    vs_out.camera = cameraRight_worldSpace;
    
    // This constant helps define square verties, It is found here:
    // http://www.opengl-tutorial.org/intermediate-tutorials/billboards-particles/billboards/#solution-2--the-3d-way
    float g_vertex_buffer_data[] = float[](-0.5, -0.5, 0.0,
									        0.5, -0.5, 0.0,
									       -0.5, 0.5, 0.0,
									        0.5, 0.5, 0.0);
	
	// Was synthesis by the square vetries array above.
	vec3 squareVertices = vec3(-0.5, 0.5, 0.0);						        
    vec3 vertexPos = billboardCenterPos + cameraRight_worldSpace.xyz * squareVertices * billboardSize;
									        
}