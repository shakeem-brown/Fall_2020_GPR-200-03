// GLSL STARTER CODE BY DANIEL S. BUCKSTEIN
//  -> IMAGE TAB (final)
/*
	Authors: Andrew Barnett & Shakeem Brown
*/



vec3 blinn_phong(in sRay ray, in wWorm worm, in Light light, in float time)
{
    return vec3(0.0);
}

vec4 createScene(in wWorm worm, in vec4 center1,in float radius, in sRay ray,
              in vec4 mouse, in sViewport vp)
{
    
    // ********* THE WALLS *********
    
    // ********* THE WORMHEAD *********
    vec3 dp;
    
    dp.xy = ray.direction.xy - worm.center1.xy; 
    float lSq = dot(dp.xy, dp.xy);
    float rSq = worm.radius * worm.radius;
    
	if (lSq <= rSq && mouse.z > 0.0 )
    {
        return texture(iChannel1, ray.direction.xy);
    }
    
    // ********* THE FLOOR *********
    vec4 theFloor = texture(iChannel0, vp.uv);
    return theFloor;
}


// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out color4 fragColor, in sCoord fragCoord)
{
    // viewing plane (viewport) inputs
    const sBasis eyePosition = sBasis(0.0);
    const sScalar viewportHeight = 2.0, focalLength = 1.5;
    
    // ray
    sRay ray;
    
    // viewport info
    sViewport vp;
    
      // render
    initViewport(vp, viewportHeight, focalLength, fragCoord, iResolution.xy);
    initRayPersp(ray, eyePosition, vp.viewportPoint.xyz);
    
    // worm
    wWorm worm;
    worm.radius = 0.2; 
    worm.center1 = vec4(0.0, 0.0, -4.0, 1.0);
    
    
        // TESTING
    // set iChannel0 to 'Misc/Buffer A' and fetch sample
    fragColor = createScene(worm, worm.center1, worm.radius, ray,
              iMouse, vp);
}
