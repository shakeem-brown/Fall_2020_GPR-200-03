#version 300 es
//#version 450

/*
	Instructor Name: Daniel Buckstein
	Authors: Andrew Barnett & Shakeem Brown
*/

//MAIN: process VERTEX ATTRIBUTES
//	3D point in spaces
//  normal vector
//  uv: texture coordinate
//  OBJECT-SPACE
layout (location = 0) in vec4 aPosition;
layout(location = 1) in vec3 aNormal;
//in vec4 aPosition
// TEXTURE SPACE
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;


// TRANSFORM UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//TEXTURE UNIFORMS
uniform sampler2D uTextureOne;
uniform sampler2D uTextureTwo;
uniform sampler2D uTextureThree;
uniform sampler2D uTextureFour;

// VARYINGS

// PER-VERTEX: pass final color
out vec4 vColor;

// LIGHT VARYINGS
out vec3 vLightPos;
out float vDifCoefficient;
out vec3 vLightDis;
out vec3 vAttenuation;
out vec3 vDifIntensity;
out vec3 vViewVec;
out vec3 vRefLightVec;
out float vSpecCoefficient;
out float vHighExpo;
out float vSpecIntensity;
out vec3 vHalf_vector;
out float vBlinnCoefficient;
out float vBlinnHighExpo;
out float vBlinnSpecIntesnity;
out vec4 textureView;
out vec4 textureObj;
   
void calcLightVaryings(vec3 appliedColor, vec4 mPos,
 vec4 vPos, float intensity, vec3 lightCenter, vec4 baseLightColor)
 {
 	vLightPos = normalize(lightCenter - mPos.xyz);
	vDifCoefficient = max(0.0, dot(aNormal, vLightPos));
	vLightDis = vec3(lightCenter - 1.0); 
	vAttenuation = 1.0 / (1.0 + (vLightDis / intensity)
	 + (vLightDis * vLightDis) / (intensity * intensity));
    vDifIntensity = vec3(vDifCoefficient * vAttenuation); 
        
   vViewVec = normalize(vPos.xyz - mPos.xyz);
   vRefLightVec = reflect(-(vLightPos), aNormal); 
   vSpecCoefficient = max(0.0, dot(vViewVec, vRefLightVec));
   vHighExpo = 8.0; // 2.0^3.0 simplified
   vSpecIntensity = pow(vSpecCoefficient, vHighExpo);
   
   vHalf_vector = normalize(vLightPos + vViewVec); // calculates half the vector
   vBlinnCoefficient = dot(aNormal, vHalf_vector); // calculates the blinn Coefficient
   vBlinnHighExpo = (4.0 * vHighExpo); // calculates the blinn coefficient
   vBlinnSpecIntesnity = pow(vBlinnCoefficient, vBlinnHighExpo); 
 }

vec3 calcBlinnPhong(vec3 appliedColor, vec4 mPos,
 vec4 vPos, float intensity, vec3 lightCenter, vec4 baseLightColor)
 {
 	vec3 lightPos = normalize(lightCenter - aPosition.xyz);
	float difCoefficient = max(0.0, dot(aNormal, lightPos));
	vec3 lightDis = vec3(lightCenter - 1.0); 
	vec3 attenuation = 1.0 / (1.0 + (lightDis / intensity)
	 + (lightDis * lightDis) / (intensity * intensity));
    vec3 difIntensity = vec3(difCoefficient * attenuation); 
        
   vec3 viewVec = normalize(vPos.xyz - mPos.xyz);
   vec3 refLightVec = reflect(-(lightPos), aNormal); 
   float specCoefficient = max(0.0, dot(viewVec, refLightVec));
   float highExpo = 8.0; // 2.0^3.0 simplified
   float specIntensity = pow(specCoefficient, highExpo);
   
   vec3 half_vector = normalize(lightPos + viewVec); // calculates half the vector
   float blinnCoefficient = dot(aNormal, half_vector); // calculates the blinn Coefficient
   float blinnHighExpo = (4.0 * highExpo); // calculates the blinn coefficient
   float blinnSpecIntesnity = pow(blinnCoefficient, blinnHighExpo); // calculaute the blinn specular intensity
   vec3 blinn_phong_color =  vec3(((difIntensity * baseLightColor.xyz) 
   + (blinnSpecIntesnity * appliedColor)) * baseLightColor.xyz);
   return blinn_phong_color;
 }

void main()
{
	
	// POSITION PIPELINE
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_view = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_view;
	gl_Position = pos_clip;
	
	
	vec4 pokeball = texture(uTextureOne, aTexcoord.xy);
	vec4 beastball = texture(uTextureTwo, aTexcoord.xy);
	vec4 safariball = texture(uTextureThree, aTexcoord.xy);
	vec4 premierball = texture(uTextureFour, aTexcoord.xy);
	
	// LIGHT PIPELINE
	mat3 lightViewMat = mat3(uViewMat);
	mat3 lightObjMat = mat3(inverse(uModelMat));
	// LIGHT ONE
	vec3 blue = vec3(0.0, 0.0, 1.0); // The applied Light color
	float lightIntensity1 = 0.7;
	
	// CENTERS
	vec3 lightCenter1 = vec3(0.0, 10.0, -4.0);// change later
	vec3 lightCenter1_view = lightCenter1 * lightViewMat;
	vec3 lightCenter1_obj = lightCenter1 * lightObjMat;
	
	vec4 light1_view = vec4(calcBlinnPhong(blue, aPosition, pos_view,
	 lightIntensity1, lightCenter1_view, pokeball), 1.0);
	 vec4 light1_obj = vec4(calcBlinnPhong(blue, aPosition, pos_view,
	 lightIntensity1, lightCenter1_obj, beastball), 1.0);
	 
	 // LIGHT TWO
	vec3 red = vec3(1.0, 0.0, 0.0); // The applied Light color
    float lightIntensity2 = 1.0;
     
     // CENTERS
	vec3 lightCenter2 = vec3(1000.0, 0.0, -4.0);// change later
    vec3 lightCenter2_view = lightCenter2 * lightViewMat;
	vec3 lightCenter2_obj = lightCenter2 * lightObjMat;

	vec4 light2_view = vec4(calcBlinnPhong(red, aPosition, pos_view,
	 lightIntensity2, lightCenter2_view, pokeball), 1.0);
	 vec4 light2_obj = vec4(calcBlinnPhong(red, aPosition, pos_view,
	 lightIntensity2, lightCenter2_obj, beastball), 1.0);
	 
	 // LIGHT THREE
	vec3 green = vec3(0.0, 1.0, 0.0); // The applied Light color
    float lightIntensity3 = 0.8;
     
     // CENTERS
	vec3 lightCenter3 = vec3(100.0, 0.0, -4.0);// change later
		vec3 lightCenter3_view = lightCenter3 * lightViewMat;
	vec3 lightCenter3_obj = lightCenter3 * lightObjMat;

	vec4 light3_view = vec4(calcBlinnPhong(green, aPosition, pos_view,
	 lightIntensity3, lightCenter3_view, pokeball), 1.0);
	 vec4 light3_obj = vec4(calcBlinnPhong(green, aPosition, pos_view,
	 lightIntensity3, lightCenter3_obj, beastball), 1.0);
	
    calcLightVaryings(blue, aPosition,
     pos_view, lightIntensity1, lightCenter1_view, safariball);
     
     calcLightVaryings(red, aPosition,
     pos_view, lightIntensity2, lightCenter2_view, safariball);
     
     calcLightVaryings(green, aPosition,
     pos_view, lightIntensity3, lightCenter3_view, safariball);
     
     calcLightVaryings(blue, aPosition,
     pos_view, lightIntensity1, lightCenter1_obj, premierball);
     
     calcLightVaryings(red, aPosition,
     pos_view, lightIntensity2, lightCenter2_obj, premierball);
     
     calcLightVaryings(green, aPosition,
     pos_view, lightIntensity3, lightCenter3_obj, premierball);
 
 
	// View Space Image
	//vColor =  pokeball;
	//vColor += mix(light1_view, light2_view, light3_view);
	
	// Object Space Image
	vColor = beastball;
	vColor += mix(light1_obj, light2_obj, light3_obj);
	
	
}


