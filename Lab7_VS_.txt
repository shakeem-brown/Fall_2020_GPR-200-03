#version 300 es
//#version 450

/*
	Title: Lab 7 Vertex Shaders and Transformations
	Instructor Name: Daniel Buckstein
	Authors: Andrew Barnett & Shakeem Brown
*/

//MAIN: process VERTEX ATTRIBUTES
//	3D point in spaces
//  normal vector
//  uv: texture coordinate
//  OBJECT-SPACE
layout (location = 0) in vec4 aPosition;
layout(location = 1) in vec3 aNormal;
//in vec4 aPosition
// TEXTURE SPACE
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;


// TRANSFORM UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//TEXTURE UNIFORMS
uniform sampler2D uTextureOne;
uniform sampler2D uTextureTwo;
uniform sampler2D uTextureThree;
uniform sampler2D uTextureFour;

// VARYINGS

// PER-VERTEX: pass final color
out vec4 vColor;

// LIGHT VARYINGS
out vec3 vDifIntensity1_view;
out float vBlinnSpecIntensity1_view;
out vec3 vDifIntensity2_view;
out float vBlinnSpecIntensity2_view;
out vec3 vDifIntensity3_view;
out float vBlinnSpecIntensity3_view;
out vec3 vDifIntensity1_obj;
out float vBlinnSpecIntensity1_obj;
out vec3 vDifIntensity2_obj;
out float vBlinnSpecIntensity2_obj;
out vec3 vDifIntensity3_obj;
out float vBlinnSpecIntensity3_obj;

// TEXTURE VARYINGS
out vec4 textureView;
out vec4 textureObj;

// calcDifIntensity: calculates the diffuse intensity
//		mPos: the object-space
//		vPos: the camera-space
//		intensity: the intensity of the light
//		lightCenter: the light's center
vec3 calcDifIntensity(vec4 mPos,
vec4 vPos, float intensity, vec3 lightCenter)
 {
    vec3 lightPos = normalize(lightCenter - aPosition.xyz); // Calculates the light's position
    float difCoefficient = max(0.0, dot(aNormal, lightPos)); // calculates the diffues coefficent
    vec3 lightDis = vec3(lightCenter - 1.0);  // calculates the light's distance
    vec3 attenuation = 1.0 / (1.0 + (lightDis / intensity)
     + (lightDis * lightDis) / (intensity * intensity)); // calculates the attenuation
    vec3 difIntensity = vec3(difCoefficient * attenuation);  // calculates the diffuse intensity
    return difIntensity; // returns the diffuse intnesity
 }

// calcBlinnIntensity: calculates the Blinn intensity
//		mPos: the object-space
//		vPos: the camera-space
//		intensity: the intensity of the light
//		lightCenter: the light's center
float calcBlinnIntensity(vec4 mPos,
 vec4 vPos, float intensity, vec3 lightCenter)
{
   vec3 lightPos = normalize(lightCenter - aPosition.xyz); // calculates the light's Position
   vec3 viewVec = normalize(vPos.xyz - mPos.xyz); // calcultes the view vector
   vec3 refLightVec = reflect(-(lightPos), aNormal);  // calculates the reflected light vector
   float specCoefficient = max(0.0, dot(viewVec, refLightVec)); // calculates the specular coefficent
   float highExpo = 8.0; // 2.0^3.0 simplified
   float specIntensity = pow(specCoefficient, highExpo); // calculates the specular intensity
   
   vec3 half_vector = normalize(lightPos + viewVec); // calculates half the vector
   float blinnCoefficient = dot(aNormal, half_vector); // calculates the blinn Coefficient
   float blinnHighExpo = (4.0 * highExpo); // calculates the blinn coefficient
   float blinnSpecIntensity = pow(blinnCoefficient, blinnHighExpo); // calculates the blinn specular intensity
   return blinnSpecIntensity; // returns the blinn specular intensity
}

// calcBlinnPhong: calculates the Blinn Phong lighting in one call
//		appliedColor: the color of the light
//		mPos: the object-space
//		vPos: the camera-space
//		intensity: the intensity of the light
//		lightCenter: the light's center
//		baseLightColor: the texture or the orignial color of the object
vec3 calcBlinnPhong(vec3 appliedColor, vec4 mPos,
 vec4 vPos, float intensity, vec3 lightCenter, vec4 baseLightColor)
 {
   vec3 difIntensity = calcDifIntensity(mPos,
    vPos, intensity, lightCenter); // Calls the diffuse intensity function
        
   float blinnSpecIntensity = calcBlinnIntensity(mPos,
    vPos, intensity, lightCenter); //Calls the blinn specular intensity function
   
   vec3 blinn_phong_color =  vec3(((difIntensity * baseLightColor.xyz) 
    + (blinnSpecIntensity * appliedColor)) * baseLightColor.xyz); // Calculation the blinn phong effect/color
   return blinn_phong_color; // Returns the blinn phong effect/color
 }

void main()
{
	
	// POSITION PIPELINE
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_view = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_view;
	gl_Position = pos_clip;
	
	// TEXTURE PIPELINE
	vec4 pokeball = texture(uTextureOne, aTexcoord.xy); // Texture1
	vec4 beastball = texture(uTextureTwo, aTexcoord.xy); // Texture2
	vec4 safariball = texture(uTextureThree, aTexcoord.xy); // Texture3
	textureView = safariball;
	vec4 premierball = texture(uTextureFour, aTexcoord.xy); // Texture4
	textureObj = premierball;
	
	// LIGHT PIPELINE
	mat3 lightViewMat = mat3(uViewMat); // View Space matrix
	mat3 lightObjMat = mat3(inverse(uModelMat)); // Object Space matrix
	
	// LIGHT ONE ************************************************************
	// BLUE LIGHT
	vec3 blue = vec3(0.0, 0.0, 1.0); // The applied Light color
	
	// CENTERS
	vec3 lightCenter1 = vec3(10.0, -10.0, 10.0); // The light's world's space center
	vec3 lightCenter1_view = lightCenter1 * lightViewMat; // The light's view space center
	vec3 lightCenter1_obj = lightCenter1 * lightObjMat; // The light's object space center
	
	// INTENSITY
	float lightIntensity1 = 0.7; // The light's world space intensity
	vec4 light1_view = vec4(calcBlinnPhong(blue, aPosition, pos_view,
	 lightIntensity1, lightCenter1_view, pokeball), 1.0); // The light's view space intensity
	vec4 light1_obj = vec4(calcBlinnPhong(blue, aPosition, pos_view,
	 lightIntensity1, lightCenter1_obj, beastball), 1.0); // The light's object space intensity
	 
	 // LIGHT TWO ************************************************************
	 // RED LIGHT
	 vec3 red = vec3(1.0, 0.0, 0.0); // The applied Light color

         // CENTERS
         vec3 lightCenter2 = vec3(10.0, 0.0, 10.0); // The light's world's space center
         vec3 lightCenter2_view = lightCenter2 * lightViewMat; // The light's view space center
	 vec3 lightCenter2_obj = lightCenter2 * lightObjMat; // The light's object space center
	
	// INTENSITY
        float lightIntensity2 = 1.0; // The light's world space intensity
	vec4 light2_view = vec4(calcBlinnPhong(red, aPosition, pos_view,
	 lightIntensity2, lightCenter2_view, pokeball), 1.0); // The light's view space intensity
	vec4 light2_obj = vec4(calcBlinnPhong(red, aPosition, pos_view,
	 lightIntensity2, lightCenter2_obj, beastball), 1.0); // The light's object space intensity
	 
	 // LIGHT THREE ************************************************************
	 //GREEN LIGHT
	 vec3 green = vec3(0.0, 1.0, 0.0); // The applied Light color
    
         // CENTERS
	 vec3 lightCenter3 = vec3(0.0, 10.0, 10.0); // The light's world's space center
	 vec3 lightCenter3_view = lightCenter3 * lightViewMat; // The light's view space center
	 vec3 lightCenter3_obj = lightCenter3 * lightObjMat; // The light's object space center

	 // INTENSITY
         float lightIntensity3 = 0.8; // The light's world space intensity
	 vec4 light3_view = vec4(calcBlinnPhong(green, aPosition, pos_view,
	  lightIntensity3, lightCenter3_view, pokeball), 1.0); // The light's view space intensity
	 vec4 light3_obj = vec4(calcBlinnPhong(green, aPosition, pos_view,
	  lightIntensity3, lightCenter3_obj, beastball), 1.0); // The light's object space intensity
	
        // PER-FRAGMENT VIEW
        // LIGHT ONE ************************************************************
	// BLUE LIGHT'S VIEW SPACE INTENSITY
        vDifIntensity1_view = calcDifIntensity(aPosition, pos_view, lightIntensity1,
         lightCenter1_view); // The Diffuse Intensity
        vBlinnSpecIntensity1_view =  calcBlinnIntensity(aPosition, pos_view, lightIntensity1,
         lightCenter1_view); // The Blinn Specular Intensity
 	
        // LIGHT TWO ************************************************************
        // RED LIGHT'S VIEW SPACE INTENSITY
 	vDifIntensity2_view = calcDifIntensity(aPosition, pos_view, lightIntensity2,
         lightCenter2_view); // The Diffuse Intensity
        vBlinnSpecIntensity2_view = calcBlinnIntensity(aPosition, pos_view, lightIntensity2,
         lightCenter2_view); // The Blinn Specular Intensity
 
 	// LIGHT THREE ************************************************************
        // GREEN LIGHT'S VIEW SPACE INTENSITY
        vDifIntensity3_view = calcDifIntensity(aPosition, pos_view, lightIntensity3,
         lightCenter3_view); // The Diffuse Intensity
        vBlinnSpecIntensity3_view = calcBlinnIntensity(aPosition, pos_view, lightIntensity3,
         lightCenter3_view); // The Blinn Specular Intensity
 
        // PER-FRAGMENT OBJECT
        // LIGHT ONE ************************************************************
        // BLUE LIGHT'S OBJECT SPACE INTENSITY
        vDifIntensity1_obj = calcDifIntensity(aPosition, pos_view, lightIntensity1,
         lightCenter1_obj); // The Diffuse Intensity
        vBlinnSpecIntensity1_obj = calcBlinnIntensity(aPosition, pos_view, lightIntensity1,
         lightCenter1_obj); // The Blinn Specular Intensity
 
        // LIGHT TWO ************************************************************
        // RED LIGHT'S OBJECT SPACE INTENSITY
        vDifIntensity2_obj = calcDifIntensity(aPosition, pos_view, lightIntensity2,
         lightCenter2_obj); // The Diffuse Intensity
        vBlinnSpecIntensity2_obj = calcBlinnIntensity(aPosition, pos_view, lightIntensity2,
         lightCenter2_obj); // The Blinn Specular Intensity
 	
 	// LIGHT THREE ************************************************************
        // GREEN LIGHT'S OBJECT SPACE INTENSITY
        vDifIntensity3_obj = calcDifIntensity(aPosition, pos_view, lightIntensity3,
         lightCenter3_obj); // The Diffuse Intensity
        vBlinnSpecIntensity3_obj = calcBlinnIntensity(aPosition, pos_view, lightIntensity3,
         lightCenter3_obj); // The Blinn Specular Intensity
 
	// VIEW SPACE IMAGE
	///*
	//vColor =  pokeball;
	vColor += mix(light1_view, light2_view, light3_view);
	//*/
	
	// OBJECT SPACE IMAGE
	/*
	vColor = beastball;
	vColor += mix(light1_obj, light2_obj, light3_obj);
	*/
}


