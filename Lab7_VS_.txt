#version 300 es
//#version 450

/*
	Instructor Name: Daniel Buckstein
	Authors: Andrew Barnett & Shakeem Brown
*/

//MAIN: process VERTEX ATTRIBUTES
//	3D point in spaces
//  normal vector
//  uv: texture coordinate
//  OBJECT-SPACE
layout (location = 0) in vec4 aPosition;
layout(location = 1) in vec3 aNormal;
//in vec4 aPosition
// TEXTURE SPACE
//layout (location = 2) in vec2 aTexcoord;
layout (location = 2) in vec4 aTexcoord;


// TRANSFORM UNIFORMS
uniform mat4 uModelMat;
uniform mat4 uViewMat;
uniform mat4 uProjMat;
uniform mat4 uViewProjMat;

//TEXTURE UNIFORMS
uniform sampler2D uTextureOne;
uniform sampler2D uTextureTwo;
uniform sampler2D uTextureThree;
uniform sampler2D uTextureFour;

// VARYING

// PER-VERTEX: pass final color
out vec4 vColor;

// PER-FRAGMENT: pass requirements
out vec4 vNormal;

//out vec2 vTexcoord;
//out vec4 vTexcoord;


vec3 calcBlinnPhong(vec3 appliedColor, vec4 mPos,
 vec4 vPos, float intensity, vec3 lightCenter, vec4 baseLightColor)
 {
 	vec3 lightPos = normalize(lightCenter - aPosition.xyz);
	float difCoefficient = max(0.0, dot(aNormal, lightPos));
	vec3 lightDis = vec3(lightCenter - 1.0); 
	vec3 attenuation = 1.0 / (1.0 + (lightDis / intensity)
	 + (lightDis * lightDis) / (intensity * intensity));
    vec3 difIntensity = vec3(difCoefficient * attenuation); 
        
   vec3 viewVec = normalize(vPos.xyz - mPos.xyz);
   vec3 refLightVec = reflect(-(lightPos), aNormal); 
   float specCoefficient = max(0.0, dot(viewVec, refLightVec));
   float highExpo = 8.0; // 2.0^3.0 simplified
   float specIntensity = pow(specCoefficient, highExpo);
   
   vec3 half_vector = normalize(lightPos + viewVec); // calculates half the vector
   float blinnCoefficient = dot(aNormal, half_vector); // calculates the blinn Coefficient
   float blinnHighExpo = (4.0 * highExpo); // calculates the blinn coefficient
   float blinnSpecIntesnity = pow(blinnCoefficient, blinnHighExpo); // calculaute the blinn specular intensity
   vec3 blinn_phong_color =  vec3(((difIntensity * baseLightColor.xyz) 
   + (blinnSpecIntesnity * appliedColor)) * baseLightColor.xyz);
   return blinn_phong_color;
 }

void main()
{
	//Require: write to this variable:
	// problem: gl_Position is in "clip-space"
	// problem: aPosition is in "object-space"
	//gl_Position = aPosition;
	
	// position in world (not yet right)
	// vec4 pos_view = uViewMat * pos_world;
	// gl_Position = pos_world;
	
	// position in camera space (still not right)
	//vec4 pos_view = uViewMat * pos_world;
	//vec4 pos_view = uViewMat * uModelMat * aPosition;
	//gl_Position = pos_view;
	
	// position in clip space (hooray)
	//vec4 pos_clip = uViewProjMat * pos_world;
	//vec4 pos_clip = uProjMat * uViewMat * uModelMat * aPosition;
	
	// POSITION PIPELINE
	mat4 modelViewMat = uViewMat * uModelMat;
	vec4 pos_view = modelViewMat * aPosition;
	vec4 pos_clip = uProjMat * pos_view;
	gl_Position = pos_clip;
	
	//NORMAL PIPELINE
	mat3 normalMat = inverse(transpose(mat3(modelViewMat)));
	vec3 nrm_view = normalMat * aNormal;
	
	// TEXCOORD PIPELINE
	// (1, 1) & (2, 2) are the scalers
	// (4, 1) & (4, 2) are the transformations
	mat4 atlasMat = mat4(0.5, 0.0, 0.0, 0.0,
						 0.0, 0.5, 0.0, 0.0,
						 0.0, 0.0, 1.0, 0.0,
						 0.25, 0.25, 0.0, 1.0);
	vec4 uv_atlas = atlasMat * aTexcoord;
	
	vec4 pokeball = texture(uTextureOne, aTexcoord.xy);
	vec4 dreamball = texture(uTextureTwo, aTexcoord.xy);
	vec4 beastball = texture(uTextureThree, aTexcoord.xy);
	vec4 safariball = texture(uTextureFour, aTexcoord.xy);
	
	
	// LIGHT PIPELINE
	// LIGHT ONE
	vec3 blue = vec3(0.0, 0.0, 1.0); // The applied Light color
	vec3 lightCenter1 = vec3(0.0, 10.0, -4.0);// change later
	float lightIntensity1 = 0.7;
	vec4 light1 = vec4(calcBlinnPhong(blue, aPosition, pos_view,
	 lightIntensity1, lightCenter1, pokeball), 1.0);
	 
	 // LIGHT TWO
	 vec3 red = vec3(1.0, 0.0, 0.0); // The applied Light color
	 vec3 lightCenter2 = vec3(1000.0, 0.0, -4.0);// change later
	 float lightIntensity2 = 1.0;
	 vec4 light2 = vec4(calcBlinnPhong(red, aPosition, pos_view,
	 lightIntensity2, lightCenter2, pokeball), 1.0);
	 
	 // LIGHT THREE
	 vec3 green = vec3(0.0, 1.0, 0.0); // The applied Light color
	 vec3 lightCenter3 = vec3(100.0, 0.0, -4.0);// change later
	 float lightIntensity3 = 0.8;
	 vec4 light3 = vec4(calcBlinnPhong(green, aPosition, pos_view,
	 lightIntensity3, lightCenter3, pokeball), 1.0);
	
	//  OPTIONAL: pass varyings
	//vColor = vec4(1.0, 0.5, 0.0, 1.0);
	//vColor = pos_view;
	
	// DEBUGGING
	
	// PER-VERTEX: output is final color
	//vColor = aPosition;
	// example: output normal as if it is color
	//vColor = vec4(aNormal * 0.5 + 0.5, 1.0);
	
	
	// PER-FRAGMENT: output data needed for FS to calc final
	//vNormal = vec4(aNormal, 0.0);
	vNormal = vec4(nrm_view, 0.0);
	//vColor = pokeball;
	vColor = mix(light1, light2, light3) + pokeball;
	
	
	//vTexcoord = aTexcoord;
	
	//gl_Position = uProjMat * modelViewMat * aTexcoord;
}


