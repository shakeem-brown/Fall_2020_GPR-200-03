/*
	Author: Shakeem Brown & Andrew Barnett
*/
    
// calcViewport: calculate the viewing plane (viewport) coordinate
//    viewport:       output viewing plane coordinate
//    ndc:            output normalized device coordinate
//    uv:             output screen-space coordinate
//    aspect:         output aspect ratio of screen
//    resolutionInv:  output reciprocal of resolution
//    viewportHeight: input height of viewing plane
//    fragCoord:      input coordinate of current fragment (in pixels)
//    resolution:     input resolution of screen (in pixels)
void calcViewport(out vec2 viewport, out vec2 ndc, out vec2 uv,
                  out float aspect, out vec2 resolutionInv,
                  in float viewportHeight, in vec2 fragCoord, in vec2 resolution)
{
    // inverse (reciprocal) resolution = 1 / resolution
    resolutionInv = 1.0 / resolution;
    
    // aspect ratio = screen width / screen height
    aspect = resolution.x * resolutionInv.y;

    // uv = screen-space coordinate = [0, 1) = coord / resolution
    uv = fragCoord * resolutionInv;

    // ndc = normalized device coordinate = [-1, +1) = uv*2 - 1
    ndc = uv * 2.0 - 1.0;

    // viewport: x = [-aspect*h/2, +aspect*h/2), y = [-h/2, +h/2)
    viewport = ndc * (vec2(aspect, 1.0) * (viewportHeight * 0.5));
}

// The Ray Calculations
vec4 rayEval(in vec4 rayDirection, in vec4 rayOrigin, in float time)
{
    vec4 ray = rayOrigin + (time * rayDirection);
    return ray;
}

// calcRay: calculate the ray direction and origin for the current pixel
//    rayDirection: output direction of ray from origin
//    rayOrigin:    output origin point of ray
//    viewport:     input viewing plane coordinate (use above function to calculate)
//    focalLength:  input distance to viewing plane
void calcRay(out vec4 rayDirection, out vec4 rayOrigin,
             in vec2 viewport, in float focalLength)
{
    // ray origin relative to viewer is the origin
    // w = 1 because it represents a point; can ignore when using
    rayOrigin = vec4(0.0, 0.0, 0.0, 1.0);

    // ray direction relative to origin is based on viewing plane coordinate
    // w = 0 because it represents a direction; can ignore when using
    rayDirection = vec4(viewport.x, viewport.y, -focalLength, 0.0);
}

// Calculates the squared length of two vectors
float lengthSquared(in vec4 vector1, in vec4 vector2)
{
    return dot(vector1, vector2); // calculates the dot product of the two vectors
}

// Calculates the second power of a 
float pow2(in float number)
{
    number *= number; // squared
    return number;
}

// might break
float hit_sphere(in vec4 rayDirection, in vec4 rayOrigin, in float radius, in vec4 ray, resolution)
{
   vec4
}

// calcColor: calculate the color of a pixel given a ray
//    rayDirection: input ray direction
//    rayOrigin:    input ray origin
vec4 calcColor(in vec4 rayDirection, in vec4 rayOrigin, in float time )
{
 	vec4 ray = rayEval(rayDirection, rayOrigin, time); // defining the ray
    float alpha = rayDirection.y + 1.0;
    vec4 color1 = vec4(1.0, 1.0, 1.0, alpha);
    vec4 color2 = vec4(0.5, 0.7, 1.0, alpha);
    vec4 unit_vector = ray / rayDirection;
    vec4 unit_direction = unit_vector;
    float t = 0.5 * unit_direction.y + 1.0;
    vec4 finalColor = mix(color1, color2, alpha);
    return finalColor;
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    // viewing plane (viewport) info
    vec2 viewport, ndc, uv, resolutionInv;
    float aspect;
    const float viewportHeight = 2.0, focalLength = 1.0;

    // ray
    vec4 rayDirection, rayOrigin;

    // setup
    calcViewport(viewport, ndc, uv, aspect, resolutionInv,
                 viewportHeight, fragCoord, iResolution.xy);
    calcRay(rayDirection, rayOrigin,
            viewport, focalLength);

    // color
    fragColor = calcColor(rayDirection, rayOrigin, iTime );

    // TEST COLOR:
    //  -> what do the other things calculated above look like?
    //fragColor = vec4(viewport, 0.0, 0.0);
    //fragColor = vec4(ndc, 0.0, 0.0);
    //fragColor = vec4(uv, 0.0, 0.0);
}

/* 
vec4 oc = rayOrigin - rayOrigin.x;
   float a = lengthSquared(rayDirection, rayDirection);
   float b = 2.0 * lengthSquared(oc, rayDirection);
   float c = lengthSquared(oc, oc) - pow2(radius);
   float discriminant = pow2(radius) - 4.0 * a * c;
    
   if (discriminant > 0.0)
   {
       return (-b - sqrt(discriminant)) / (2.0 * a);
   }
   else
   {
       return -1.0;
   }
*/