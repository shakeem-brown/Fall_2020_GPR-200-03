/*
	Authers: Andrew Barnett & Shakeem Brown
	Buffer C, Gaussian Blur
*/

const int samples = 35;
const int LOD = 2;         // gaussian done on MIPmap at scale LOD
const int sLOD = 1 << LOD; // tile size = 2^LOD
const float sigma = float(samples) * 0.03663;

float gaussian(in vec2 i) 
{
    return exp( -.5* dot(i/=sigma,i) ) / ( 6.28 * sigma*sigma );
}

vec4 blur(sampler2D image, in vec2 fragCoord, vec2 scale) 
{
    vec4 blurEffect = vec4(0);  
    int s = samples/sLOD;
    
    for ( int i = 0; i < s*s; i++ )
    {
        vec2 d = vec2(i%s, i/s)*float(sLOD) - float(samples)/2.;
        blurEffect += gaussian(d) * textureLod( image, fragCoord + scale * d , float(LOD) );
    }
    
    return blurEffect / blurEffect.a;
}

// mainImage: process the current pixel (exactly one call per pixel)
//    fragColor: output final color for current pixel
//    fragCoord: input location of current pixel in image (in pixels)
void mainImage(out vec4 fragColor, in vec2 fragCoord)
{
    fragColor = blur( iChannel0, fragCoord/iResolution.xy, 1./iChannelResolution[0].xy );
}