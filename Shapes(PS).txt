#version 300 es
//#version 450

/*
	Title: Lab 8 Shader Pipelines
	Instructor Name: Daniel Buckstein
	Authors: Andrew Barnett & Shakeem Brown
*/

#ifdef GL_ES
precision highp float;
#endif // GL_ES

layout (location = 0) out vec4 rtFragColor;

// VARYINGS
in vec4 vPosClip;
in vec4 objPos;
in vec4 norm;

// UNIFORMS
uniform mat4 uViewMat, uPerMat;
uniform vec3 objColor;
uniform float objShininess;
uniform vec3 viewPosition;
uniform vec3 lightPos;
uniform vec3 lightAmbient;
uniform vec3 lightDiffuse;
uniform vec3 lightSpecular;
uniform vec3 geoColor;

vec3 depthTest()
{
    mat4 invViewMat = inverse(uViewMat);
	vec3 wPoint = vec3(invViewMat * vec4(lightPos, 1.0));
	vec3 lightSpacePoint = vec3(uPerMat * vec4(wPoint, 1.0));
	lightSpacePoint = lightSpacePoint * 0.5 + 0.5;
	float realDepth = lightSpacePoint.z;
	return lightSpacePoint;
}

// calcLight
vec4 calcLight()
{
   vec3 lightPos = normalize(lightPos - objPos.xyz); // calculates the light's Position
   vec3 viewVec = normalize(viewPosition.xyz - objPos.xyz); // calcultes the view vector
   vec3 refLightVec = reflect(-(lightPos), norm.xyz);  // calculates the reflected light vector
 
   vec3 specIntensity = pow(max(0.0, dot(viewVec,refLightVec)), objShininess) * lightSpecular;
   vec3 diffIntensity = lightDiffuse * dot(viewVec,lightPos);
   
   float dis = distance(lightPos, objPos.xyz);
   float attenuation = 1.0 /(1.0 + 0.1*dis + 0.01*dis*dis);
   vec3 color = ((diffIntensity + specIntensity)*attenuation + lightAmbient)*geoColor;
	return vec4(color, 1.0);
}

mat4 biMat = mat4(0.5, 0.0, 0.0, 0.0,
	                  0.0, 0.5, 0.0, 0.0,
	                  0.0, 0.0, 0.5, 0.0,
	                  0.5, 0.5, 0.5, 1.0);

void main()
{
	rtFragColor = calcLight();
    // Making sure every obj has a different hue
    rtFragColor += vec4(geoColor, 1.0);
    
}