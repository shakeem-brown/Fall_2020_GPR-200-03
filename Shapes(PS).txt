#version 300 es
//#version 450

/*
	Title: Lab 8 Shader Pipelines
	Instructor Name: Daniel Buckstein
	Authors: Andrew Barnett & Shakeem Brown
*/

#ifdef GL_ES
precision highp float;
#endif // GL_ES

layout (location = 0) out vec4 rtFragColor;

// VARYINGS
in vec4 vPosClip;
in vec4 objPos;
in vec4 norm;

// UNIFORMS
uniform vec3 objColor;
uniform float objShininess;
uniform vec3 viewPosition;
uniform vec3 lightPos;
uniform vec3 lightAmbient;
uniform vec3 lightDiffuse;
uniform vec3 lightSpecular;
uniform vec3 geoColor;

// calcDifIntensity: calculates the diffuse intensity
//		mPos: the object-space
//		vPos: the camera-space
//		lightCenter: the light's center
vec3 calcDifIntensity(vec4 mPos, vec4 vPos,  vec3 lightCenter)
 {
    float intensity = 1.0;
 	vec3 lightPos = normalize(lightCenter - objPos.xyz); // Calculates the light's position
	float difCoefficient = max(0.0, dot(norm.xyz, lightPos)); // calculates the diffues coefficent
	vec3 lightDis = vec3(lightCenter - 1.0);  // calculates the light's distance
	vec3 attenuation = 1.0 / (1.0 + (lightDis / intensity)
	 + (lightDis * lightDis) / (intensity * intensity)); // calculates the attenuation
    vec3 difIntensity = vec3(difCoefficient * attenuation);  // calculates the diffuse intensity
    return difIntensity; // returns the diffuse intnesity
 }
 
 // calcBlinnIntensity: calculates the Blinn intensity
//		mPos: the object-space
//		vPos: the camera-space
//		lightCenter: the light's center
vec4 calcLight()
{
   vec3 lightPos = normalize(lightPos - objPos.xyz); // calculates the light's Position
   vec3 viewVec = normalize(viewPosition.xyz - objPos.xyz); // calcultes the view vector
   vec3 refLightVec = reflect(-(lightPos), norm.xyz);  // calculates the reflected light vector
 
   vec3 specIntensity = pow(max(0.0, dot(viewVec,refLightVec)), objShininess) * lightSpecular;
   vec3 diffIntensity = lightDiffuse * dot(viewVec,lightPos);
   
   float dis = distance(lightPos, objPos.xyz);
   float attenuation = 1.0 /(1.0 + 0.1*dis + 0.01*dis*dis);
   vec3 color = ((diffIntensity + specIntensity)*attenuation + lightAmbient)*objColor;
	return vec4(color, 1.0);
}

void main()
{
	rtFragColor = calcLight();
    // Making sure every obj has a different hue
    rtFragColor += vec4(geoColor, 1.0);
    
	// MANUAL PERSEPECTIVE DIVIDE
	vec4 posNDC = vPosClip / vPosClip.w;
	//rtFragColor = posNDC;
	// [-1, +1] -> [0, 1]
	
	// SCREEN-SPACE
	vec4 posScreen = posNDC * 0.5 + 0.5;
	rtFragColor *= posScreen;
	// [-1, +1] -> [0, 1]
	
	//TEST: remove blue to see RGY gradiant
	//rtFragColor.b = 0.0;
	
}